<h1>About</h1>
<p>網頁: <a href="https://liaots.github.io/cd2024/">https://liaots.github.io/cd2024/</a></p>
<p>網誌: <a href="https://liaots.github.io/cd2024/blog/">https://liaots.github.io/cd2024/blog/</a></p>
<p>簡報: <a href="https://liaots.github.io/cd2024/reveal/">https://liaots.github.io/cd2024/reveal/</a></p>
<p>倉儲: <a href="https://github.com/Liaots/cd2024">https://github.com/Liaots/cd2024</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>HW</h1>
<h2>w5教學影片</h2>
<p>設定Replit Github應用授權的說明影片2:44</p>
<p>影片:<a href="https://reccloud.com/tw/u/jw7bxyz">https://reccloud.com/tw/u/jw7bxyz</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1qbrSS6qTYldt--RfGP42r9AeL8a5inCM/view?usp=drive_link">https://drive.google.com/file/d/1qbrSS6qTYldt--RfGP42r9AeL8a5inCM/view?usp=drive_link</a></p>
<p></p>
<p>說明如何利用Replit對cd2024改版20:16</p>
<p>影片:<a href="https://reccloud.com/tw/u/e0mr8wr">https://reccloud.com/tw/u/e0mr8wr</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1YtrscSwhE7WdaAHfkzsl-YsJJnuY-QUP/view?usp=drive_link">https://drive.google.com/file/d/1YtrscSwhE7WdaAHfkzsl-YsJJnuY-QUP/view?usp=drive_link</a></p>
<p></p>
<p>使用Github維護個人網站10:21</p>
<p>影片:<a href="https://reccloud.com/tw/u/55k9sf3">https://reccloud.com/tw/u/55k9sf3</a></p>
<p>逐字稿:<a href="https://drive.google.com/file/d/1m9mJ_p5qS8vH4o-E8LtSfas7qGiFCeHJ/view?usp=drive_link">https://drive.google.com/file/d/1m9mJ_p5qS8vH4o-E8LtSfas7qGiFCeHJ/view?usp=drive_link</a></p>
<p></p>
<p>心得:<span>個人的cd2024倉儲以Github帳號登入Gitpod之後，就可以直接維護</span></p>
<h2>W10</h2>
<h3>任務一</h3>
<div class="line number1 index0 alt2"><code class="py comments"># 開啟 2a.txt 檔案並讀取資料</code></div>
<div class="line number2 index1 alt1"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'2a.txt'</code><code class="py plain">, </code><code class="py string">'r'</code><code class="py plain">) as </code><code class="py functions">file</code><code class="py plain">:</code></div>
<div class="line number3 index2 alt2"><code class="py spaces">    </code><code class="py plain">lines </code><code class="py keyword">=</code> <code class="py functions">file</code><code class="py plain">.readlines()  </code><code class="py comments"># 讀取每一行資料</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py comments"># 將每一行資料逐一放入數列</code></div>
<div class="line number6 index5 alt1"><code class="py plain">student_data </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">for</code> <code class="py plain">line </code><code class="py keyword">in</code> <code class="py plain">lines:</code></div>
<div class="line number8 index7 alt1"><code class="py spaces">    </code><code class="py plain">student_data.append(line.strip().split())</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="py comments"># 輸出學生資料</code></div>
<div class="line number11 index10 alt2"><code class="py keyword">for</code> <code class="py plain">data </code><code class="py keyword">in</code> <code class="py plain">student_data:</code></div>
<div class="line number12 index11 alt1"><code class="py spaces">    </code><code class="py plain">student_id, github_account, group </code><code class="py keyword">=</code> <code class="py plain">data</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"學號:"</code><code class="py plain">, student_id)</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"Github帳號:"</code><code class="py plain">, github_account)</code></div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"組別:"</code><code class="py plain">, group)</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">()</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 建立學員倉儲連結</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py plain">student_repo_link </code><code class="py keyword">=</code> <code class="py plain">f</code><code class="py string">"https://github.com/{github_account}/cd2024"</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"學員倉儲連結:"</code><code class="py plain">, student_repo_link)</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py comments"># 建立學員網站連結</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py plain">student_website_link </code><code class="py keyword">=</code> <code class="py plain">f</code><code class="py string">"https://{github_account}.github.io/cd2024"</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"學員網站連結:"</code><code class="py plain">, student_website_link)</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py comments"># 建立 2a 分組倉儲連結</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py plain">group_repo_link </code><code class="py keyword">=</code> <code class="py plain">f</code><code class="py string">"https://github.com/mdecd2024/2a-{group}"</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"2a 分組倉儲連結:"</code><code class="py plain">, group_repo_link)</code></div>
<div class="line number29 index28 alt2"> </div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">()</code></div>
<div class="line number1 index0 alt2"><code class="py comments"></code></div>
<h2>任務二</h2>
<p><span>論文一：Construction and theoretical study of a ball balancing platform</span></p>
<p>重點在實現在球的表面上平衡物體的目標。論文描述了平台的結構和建造過程，包括所使用的材料和製造方法。接著透過理論分析和數值模擬，探討了平台在不同條件下的平衡性能。研究發現，平台的設計和結構對於實現穩定平衡至關重要。最後，論文討論了潛在的應用和未來研究方向，以進一步改進和擴展這種球平衡平台的功能和性能。</p>
<p><span></span></p>
<p><span></span></p>
<p><span>論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation</span></p>
<p>這篇論文描述了一個用於實時控制在平台上平衡球的系統，並采用了FPGA平行實現。論文介紹了該系統的整體架構，包括所使用的硬體和軟體組件。然後描述了控制算法的設計和實現，以實現對球位置的即時調整，以保持其在平台上的平衡。接著論文詳細介紹了在FPGA上實現該系統的平行化策略和技術。最後通過實驗和測試，驗證了系統的性能和穩定性。該系統的成功實現表明了FPGA平行計算在實時控制應用中的潛在優勢，並提供了一個可行的方法來實現這種類型的平衡系統。</p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-efjqm-79elbk h-full">
<div class="react-scroll-to-bottom--css-efjqm-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-scroll-anchor="true" data-testid="conversation-turn-5" dir="auto">
<div class="py-2 px-3 text-base md:px-4 m-auto md:px-5 lg:px-1 xl:px-5">
<div class="mx-auto flex flex-1 gap-3 text-base juice:gap-4 juice:md:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto gap-3" data-message-author-role="assistant" data-message-id="b6b2cbfe-dc9a-45b4-8111-a13847696740" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p></p>
<p>論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach</p>
<p>這篇論文對雙軸平台上球位置控制的模擬和實驗研究，採用了狀態空間方法。論文介紹了所研究的雙軸平台的結構和系統特性。接著使用狀態空間方法建立了系統的數學模型，包括平台和球的動力學方程。然後利用模擬技術對系統進行了分析和測試，評估了不同控制策略的性能。在模擬研究的基礎上，進行了實驗驗證，通過實際構建的雙軸平台和相應的控制系統進行了測試。最後比較了模擬和實驗結果，驗證了狀態空間方法在實現雙軸平台上球位置控制方面的有效性和準確性。該研究為設計和實現類似系統提供了重要的參考和指導。</p>
<p></p>
<p><span>論文四：Design and Implementation a Ball Balancing System for Control Theory Course</span></p>
<p>這篇論文描述了一個用於控制理論課程的球平衡系統的設計和實施。論文介紹了球平衡系統的整體結構和工作原理，包括所使用的感測器、控制器和執行器等組件。然後描述了系統的設計過程，包括控制算法的選擇和實現，以及硬體平台的選型和構建。接著通過模擬和實驗，評估了系統的性能和穩定性，並對控制理論中的各種概念進行了實際應用和驗證。最後論文討論了學生通過該系統在課堂上的學習效果和收穫，並提出了對未來改進和擴展的建議。這個球平衡系統為控制理論課程的教學提供了一個生動、具體的示例，有助於學生更好地理解和應用控制理論的基本原理和技術。<br/><span></span></p>
<p></p>
<p><span>論文五：Ball on the plate balancing control system</span></p>
<p><span>這篇論文介紹了一種稱為「Ball on the Plate」的平衡控制系統。該系統為在實現通過調節平台上球的位置，使其保持平衡的目標。論文首先描述了系統的整體結構和工作原理，包括所使用的感測器、控制器和執行器等組件。接著介紹了系統的設計和實施過程，包括控制算法的開發和實現，以及硬體平台的構建和測試。然後通過模擬和實驗，評估了系統的性能和穩定性，並探討了不同控制參數對系統性能的影響。最後論文討論了該系統的潛在應用和未來改進的方向。這個平衡控制系統可應用於多個領域，如機器人控制、自動化生產等，並為相關研究和應用提供了一個重要的參考和基礎。</span></p>
<p><span></span></p>
<p><span>論文六：2D Ball Balancer Control using QUARC</span></p>
<p>這篇論文描述了一種使用QUARC（Quick Control Prototype）的2D球平衡控制系統。QUARC是一種用於快速原型設計的工具，可以實時生成代碼，用於控制和監視實際硬體。論文首先介紹了2D球平衡系統的結構和工作原理，以及所用的感測器和執行器。接著描述了控制系統的設計和實施過程，包括控制算法的開發和QUARC的應用。然後通過模擬和實驗，評估了系統的性能和穩定性，並探討了不同控制策略對系統行為的影響。最後論文討論了該系統的應用前景和未來研究方向。這個基於QUARC的2D球平衡控制系統為快速原型開發提供了一個有效的工具，同時也為相關領域的研究和應用提供了重要參考。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<h1>論文摘要</h1>
<!-- editor2 結束 -->
<p><span>論文一：Construction and theoretical study of a ball balancing platform</span></p>
<p>重點在實現在球的表面上平衡物體的目標。論文描述了平台的結構和建造過程，包括所使用的材料和製造方法。接著透過理論分析和數值模擬，探討了平台在不同條件下的平衡性能。研究發現，平台的設計和結構對於實現穩定平衡至關重要。最後，論文討論了潛在的應用和未來研究方向，以進一步改進和擴展這種球平衡平台的功能和性能。</p>
<p><span></span></p>
<p><span></span></p>
<p><span>論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation</span></p>
<p>這篇論文描述了一個用於實時控制在平台上平衡球的系統，並采用了FPGA平行實現。論文介紹了該系統的整體架構，包括所使用的硬體和軟體組件。然後描述了控制算法的設計和實現，以實現對球位置的即時調整，以保持其在平台上的平衡。接著論文詳細介紹了在FPGA上實現該系統的平行化策略和技術。最後通過實驗和測試，驗證了系統的性能和穩定性。該系統的成功實現表明了FPGA平行計算在實時控制應用中的潛在優勢，並提供了一個可行的方法來實現這種類型的平衡系統。</p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-efjqm-79elbk h-full">
<div class="react-scroll-to-bottom--css-efjqm-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-scroll-anchor="true" data-testid="conversation-turn-5" dir="auto">
<div class="py-2 px-3 text-base md:px-4 m-auto md:px-5 lg:px-1 xl:px-5">
<div class="mx-auto flex flex-1 gap-3 text-base juice:gap-4 juice:md:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto gap-3" data-message-author-role="assistant" data-message-id="b6b2cbfe-dc9a-45b4-8111-a13847696740" dir="auto">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p></p>
<p>論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach</p>
<p>這篇論文對雙軸平台上球位置控制的模擬和實驗研究，採用了狀態空間方法。論文介紹了所研究的雙軸平台的結構和系統特性。接著使用狀態空間方法建立了系統的數學模型，包括平台和球的動力學方程。然後利用模擬技術對系統進行了分析和測試，評估了不同控制策略的性能。在模擬研究的基礎上，進行了實驗驗證，通過實際構建的雙軸平台和相應的控制系統進行了測試。最後比較了模擬和實驗結果，驗證了狀態空間方法在實現雙軸平台上球位置控制方面的有效性和準確性。該研究為設計和實現類似系統提供了重要的參考和指導。</p>
<p></p>
<p><span>論文四：Design and Implementation a Ball Balancing System for Control Theory Course</span></p>
<p>這篇論文描述了一個用於控制理論課程的球平衡系統的設計和實施。論文介紹了球平衡系統的整體結構和工作原理，包括所使用的感測器、控制器和執行器等組件。然後描述了系統的設計過程，包括控制算法的選擇和實現，以及硬體平台的選型和構建。接著通過模擬和實驗，評估了系統的性能和穩定性，並對控制理論中的各種概念進行了實際應用和驗證。最後論文討論了學生通過該系統在課堂上的學習效果和收穫，並提出了對未來改進和擴展的建議。這個球平衡系統為控制理論課程的教學提供了一個生動、具體的示例，有助於學生更好地理解和應用控制理論的基本原理和技術。<br/><span></span></p>
<p></p>
<p><span>論文五：Ball on the plate balancing control system</span></p>
<p><span>這篇論文介紹了一種稱為「Ball on the Plate」的平衡控制系統。該系統為在實現通過調節平台上球的位置，使其保持平衡的目標。論文首先描述了系統的整體結構和工作原理，包括所使用的感測器、控制器和執行器等組件。接著介紹了系統的設計和實施過程，包括控制算法的開發和實現，以及硬體平台的構建和測試。然後通過模擬和實驗，評估了系統的性能和穩定性，並探討了不同控制參數對系統性能的影響。最後論文討論了該系統的潛在應用和未來改進的方向。這個平衡控制系統可應用於多個領域，如機器人控制、自動化生產等，並為相關研究和應用提供了一個重要的參考和基礎。</span></p>
<p><span></span></p>
<p><span>論文六：2D Ball Balancer Control using QUARC</span></p>
<p>這篇論文描述了一種使用QUARC（Quick Control Prototype）的2D球平衡控制系統。QUARC是一種用於快速原型設計的工具，可以實時生成代碼，用於控制和監視實際硬體。論文首先介紹了2D球平衡系統的結構和工作原理，以及所用的感測器和執行器。接著描述了控制系統的設計和實施過程，包括控制算法的開發和QUARC的應用。然後通過模擬和實驗，評估了系統的性能和穩定性，並探討了不同控制策略對系統行為的影響。最後論文討論了該系統的應用前景和未來研究方向。這個基於QUARC的2D球平衡控制系統為快速原型開發提供了一個有效的工具，同時也為相關領域的研究和應用提供了重要參考。<br/><span></span></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>